name: Build and Deploy to EKS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: aws-assignment
  ECR_REGISTRY: 737063749553.dkr.ecr.ap-south-1.amazonaws.com
  IMAGE_TAG: latest
  CLUSTER_NAME: aws-assignment

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Login to Amazon ECR
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Build, tag, and push Docker image
      - name: Build and Push Docker Image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 5: Test EKS access
      - name: Verify EKS access
        run: |
          aws sts get-caller-identity
          aws eks describe-cluster --name $CLUSTER_NAME --region $AWS_REGION

      # Step 6: Update kubeconfig
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      # Step 7: Deploy to EKS
      - name: Deploy Kubernetes Manifests
        run: |
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml

      # Step 8: Wait and get LoadBalancer IP
      - name: Get External IP
        run: |
          echo "Waiting for LoadBalancer IP..."
          sleep 30
          kubectl get svc
